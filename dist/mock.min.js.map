{"version":3,"file":"mock.min.js","sources":["../src/random/basic.js","../src/generator.js","../src/random/index.js","../src/mock.js"],"sourcesContent":["/**\n * 字符集模板\n */\nconst poolsChar = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  symbol: '!@#$%^&*()[]',\n};\npoolsChar.alpha = poolsChar.lower + poolsChar.upper;\npoolsChar.undefined = poolsChar.lower + poolsChar.upper + poolsChar.number + poolsChar.symbol;\n\n/**\n * 根据 min-max 返回随机值\n *\n * @export\n * @param {any} min\n * @param {any} max\n * @returns\n */\nexport function integer(min, max) {\n  min = min !== undefined ? parseInt(min, 10) : -9007199254740992;\n  max = max !== undefined ? parseInt(max, 10) : 9007199254740992; // 2^53\n  return Math.round(Math.random() * (max - min)) + min;\n}\n// 别名\nexport const int = integer;\n\n/**\n * 根据 1/min-max 的概率返回 cur 的值\n *\n * @export\n * @param {any} min\n * @param {any} max\n * @param {any} cur\n * @returns\n */\nexport function boolean(min, max, cur) {\n  if (min === undefined) {\n    return Math.random() >= 0.5;\n  }\n  const denom = max ? integer(min, max) : parseInt(min, 10);\n  return Math.random() * denom < 1 ? Boolean(cur) : !cur;\n}\n// 别名\nexport const bool = boolean;\n\n// 返回一个随机的浮点数。\nexport function float(min, max, dmin, dmax) {\n  dmax = dmax || 17;\n  dmax = Math.max(Math.min(dmax, 17), 0);\n  dmin = dmin || 0;\n  dmin = Math.max(Math.min(dmin, 17), 0);\n\n  const dcount = integer(dmin, dmax);\n  const ret = `${max ? integer(min, max) : min}.${string('number', dcount - 1)}${character('123456789')}`;\n  return parseFloat(ret, 10);\n}\n\n/**\n * 返回一个随机字符\n *\n * @export\n * @param {any} pool\n * @returns\n */\nexport function character(pool) {\n  pool = String(pool);\n  pool = poolsChar[pool.toLowerCase()] || pool;\n  return pool.charAt(integer(0, pool.length - 1));\n}\nexport const char = character;\n\n/**\n * 返回一个随机字符串\n *\n * @export\n * @param {any} pool\n * @param {any} min\n * @param {any} max\n * @returns\n */\nexport function string(pool, min, max) {\n  let count = 0;\n\n  if (max !== undefined) {\n    count = integer(min, max);\n  } else if (min !== undefined) {\n    count = +min;\n  } else if (typeof pool === 'number') {\n    count = parseInt(pool, 10);\n    pool = undefined;\n  } else {\n    count = integer(3, 7);\n  }\n\n  let text = '';\n  for (let i = 0; i < count; i++) {\n    text += character(pool);\n  }\n\n  return text;\n}\nexport const str = string;\n\n/**\n * 返回一个整型数组\n *\n * @export\n * @param {number} start 开始\n * @param {number} stop  结束\n * @param {number} step  步长\n * @returns\n */\nexport function range(start, stop, step) {\n  if (!step) {\n    step = 1;\n  }\n\n  if (!stop) {\n    stop = start || 0;\n    start = 0;\n  }\n\n  start = +start; // 开始\n  stop = +stop; // 结束\n  step = +step; // 步长\n\n  const arr = [];\n\n  for (let i = start; i < stop; i += step) {\n    arr.push(i);\n  }\n\n  return arr;\n}\n","import Random from './random/index';\n\n/* eslint no-confusing-arrow:0 */\n/* eslint no-underscore-dangle:0 */\n\n/**\n * Object#toString\n *\n * @function toString\n */\nconst toString = Object.prototype.toString;\n\n/**\n * 获取数据类型\n *\n * @param {any} any\n * @returns {string}\n */\nfunction type(any) {\n  return toString.call(any).slice(8, -1).toLowerCase();\n}\n\n/**\n * 匹配键名处理\n *\n * @param {any} key\n * @param {any} re\n * @returns\n */\nfunction match(key, re) {\n  if (type(key) !== 'string') {\n    return null;\n  }\n  return key.match(re);\n}\n\n// 处理根据\nconst processors = {\n  // 对象处理\n  object(tpl, key, opts) {\n    // 'name|count': object\n    // 'name|min-max': object\n    const ret = {};\n    const keys = Object.keys(tpl);\n    const length = keys.length;\n    let count = length;\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/);\n\n    if (m) {\n      if (m[2]) {\n        count = Random.int(m[1], m[2]);\n      } else {\n        count = +m[1];\n      }\n    }\n\n    opts.parentTpl = tpl; // 带上当前对象\n    opts.parent = ret; // 当前解析后的对象\n\n    if (count >= length) {\n      // 函数放末尾处理 'name': function\n      keys.sort(k => type(k) === 'function' ? 1 : 0);\n      // 处理全部\n      keys.forEach((it) => {\n        ret[it.replace(/\\|.+/, '')] = generator(tpl[it], it, opts);\n      });\n    } else {\n      // 随机抽取 (简单洗牌)\n      keys.sort(() => (Math.random() < 0.5 ? -1 : 1)).slice(0, count).forEach((it) => {\n        ret[it.replace(/\\|.+/, '')] = generator(tpl[it], it, opts);\n      });\n    }\n\n    return ret;\n  },\n\n  // 数组处理\n  array(tpl, key, opts) {\n    // 'name|1': array\n    // 'name|+1': array\n    // 'name|min-max': array\n    // 'name|count': array\n    let result = [];\n    const length = tpl.length;\n\n    // 处理空数组\n    if (length === 0) {\n      return result;\n    }\n\n    let count = 0;\n    const m = match(key, /\\|(\\+)?(\\d+)(?:-(\\d+))?/);\n\n    if (m) {\n      if (m[2] === '1' && m[3] === undefined) {\n        if (m[1] === '+') {\n          // 'name|+1': array\n          let idx = tpl._idx || 0;\n          if (idx >= length) {\n            idx = 0;\n          }\n          result = generator(tpl[idx], idx, opts);\n          tpl._idx = idx + 1;\n        } else {\n          // 'name|1': array\n          const idx = Random.int(0, length - 1);\n          result = generator(tpl[idx], idx, opts);\n        }\n        return result;\n      } else if (m[3]) {\n        count = Random.int(m[2], m[3]);\n      } else {\n        count = +m[2];\n      }\n    }\n\n    // 重复 count 次\n    for (let i = 0; i < count; i += 1) {\n      tpl.forEach(it => result.push(generator(it, i, opts)));\n    }\n\n    return result;\n  },\n\n  // 数字处理\n  number(tpl, key, opts) {\n    // 'name|+number': number\n    // 'name|min-max': number\n    // 'name|min-max.dmin-dmax': number\n    // 'name|number.dmin-dmax': number\n    const m = match(key, /\\|([+-]?\\d+)(?:-([-]?\\d+))?(?:\\.(\\d+)(?:-(\\d+))?)?/);\n\n    if (!m) {\n      return tpl; // 没有匹配到\n    }\n\n    // 'name|+number': number\n    if (m[1][0] === '+') {\n      opts.parentTpl[key] += parseInt(m[1], 10); // 父节点数据累加\n      return tpl;\n    }\n\n    // 'name|min-max.dmin-dmax': number\n    if (m[3] || m[4]) {\n      return Random.float(m[1], m[2], m[3], m[4]);\n    }\n\n    // 'name|min-max': number\n    if (m[2]) {\n      return Random.int(m[1], m[2]);\n    }\n\n    return tpl;\n  },\n\n  // 字符串处理\n  string(tpl, key) {\n    // 'name|min-max': string  重复 string 字符串 min-max 次\n    // 'name|count': string  重复 string 字符串 count次\n    let count = 0; // 重复次数\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/); // 匹配key\n\n    if (m) {\n      if (m[2]) {\n        // 'name|min-max': string\n        count = Random.int(m[1], m[2]);\n      } else {\n        // 'name|count': string\n        count = +m[1];\n      }\n    }\n\n    let str = tpl;\n\n    // 'name|min-max': '' or 'name|count': ''\n    if (tpl === '') {\n      return Random.string('alpha', count || undefined);\n    }\n\n    if (count) {\n      str = Array(count + 1).join(tpl); // 重复N次\n    }\n\n    // TODO: 占位符处理\n\n    return str;\n  },\n\n  // 布尔值处理\n  boolean(tpl, key) {\n    // 'name|min-max': boolean  1/min-max 的概率返回 boolean 的值\n    // 'name|count': boolean  1/count 概率返回 boolean 的值\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/); // 匹配key\n    return m ? Random.bool(m[1], m[2], tpl) : tpl;\n  },\n\n  // 函数处理 (异步处理，为了获取完整 root 对象)\n  function: (fn, key, opts) => {\n    // 'name': function\n    opts.callbacks.push({ fn, key, parent: opts.parent });\n    return '[Waiting for callback processing...]';\n  },\n};\n\nexport { Random };\n\n/**\n * 数据生成器入口\n *\n * @export\n * @param {any} data mock 模板数据\n * @param {string} key 当前数据的 key\n * @param {object} opts 公用数据\n * @returns {any}\n */\nexport default function generator(data, key, opts) {\n  const processor = processors[type(data)];\n  return processor ? processor(data, key, opts) : data;\n}\n","import * as basic from './basic';\n\nexport default {\n  ...basic,\n};\n","import generator, { Random } from './generator';\n\n// 导出工具对象\nexport { Random };\n\n// 生成器包装\nexport const Mock = {\n  mock(any) {\n    const opts = { rootTpl: any, callbacks: [] };\n    const root = generator(any, '', opts);\n\n    // 处理函数回调\n    opts.callbacks.forEach((opt) => {\n      // this 是当前父节点对象，root 是跟对象\n      opt.parent[opt.key] = opt.fn.call(opt.parent, root);\n    });\n\n    return root;\n  },\n};\n\nexport default Mock;\n"],"names":["integer","min","max","undefined","parseInt","Math","round","random","boolean","cur","denom","Boolean","character","pool","String","poolsChar","toLowerCase","charAt","length","string","count","text","i","type","any","toString","call","slice","match","key","re","generator","data","opts","processor","processors","alpha","lower","upper","number","symbol","int","bool","char","str","dmin","dmax","dcount","ret","parseFloat","start","stop","step","arr","push","basic","Object","prototype","tpl","keys","m","Random","parentTpl","parent","sort","k","forEach","it","replace","result","idx","_idx","float","Array","join","fn","callbacks","Mock","rootTpl","root","opt"],"mappings":"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"}