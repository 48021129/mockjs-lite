{"version":3,"file":"mock.min.js","sources":["../src/random/basic.js","../src/random/date.js","../src/random/helper.js","../src/random/color.js","../src/generator.js","../src/random/image.js","../src/random/color_dict.js","../src/random/index.js","../src/mock.js"],"sourcesContent":["/**\n * 字符集模板\n */\nconst poolsChar = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  symbol: '!@#$%^&*()[]',\n};\npoolsChar.alpha = poolsChar.lower + poolsChar.upper;\npoolsChar.undefined = poolsChar.lower + poolsChar.upper + poolsChar.number + poolsChar.symbol;\n\n/**\n * 根据 min-max 返回随机值\n *\n * @export\n * @param {any} min\n * @param {any} max\n * @returns\n */\nexport function integer(min, max) {\n  min = min !== undefined ? parseInt(min, 10) : -9007199254740992;\n  max = max !== undefined ? parseInt(max, 10) : 9007199254740992; // 2^53\n  return Math.round(Math.random() * (max - min)) + min;\n}\n// 别名\nexport const int = integer;\n\n/**\n * 根据 1/min-max 的概率返回 cur 的值\n *\n * @export\n * @param {any} min\n * @param {any} max\n * @param {any} cur\n * @returns\n */\nexport function boolean(min, max, cur) {\n  if (min === undefined) {\n    return Math.random() >= 0.5;\n  }\n  const denom = max ? integer(min, max) : parseInt(min, 10);\n  return Math.random() * denom < 1 ? Boolean(cur) : !cur;\n}\n// 别名\nexport const bool = boolean;\n\n// 返回一个随机的浮点数。\nexport function float(min, max, dmin, dmax) {\n  dmax = dmax || 17;\n  dmax = Math.max(Math.min(dmax, 17), 0);\n  dmin = dmin || 0;\n  dmin = Math.max(Math.min(dmin, 17), 0);\n\n  const dcount = integer(dmin, dmax);\n  const ret = `${max ? integer(min, max) : min}.${string('number', dcount - 1)}${character('123456789')}`;\n  return parseFloat(ret, 10);\n}\n\n/**\n * 返回一个随机字符\n *\n * @export\n * @param {any} pool\n * @returns\n */\nexport function character(pool) {\n  pool = String(pool);\n  pool = poolsChar[pool.toLowerCase()] || pool;\n  return pool.charAt(integer(0, pool.length - 1));\n}\nexport const char = character;\n\n/**\n * 返回一个随机字符串\n *\n * @export\n * @param {any} pool\n * @param {any} min\n * @param {any} max\n * @returns\n */\nexport function string(pool, min, max) {\n  let count = 0;\n\n  if (max !== undefined) {\n    count = integer(min, max);\n  } else if (min !== undefined) {\n    count = +min;\n  } else if (typeof pool === 'number') {\n    count = parseInt(pool, 10);\n    pool = undefined;\n  } else {\n    count = integer(3, 7);\n  }\n\n  let text = '';\n  for (let i = 0; i < count; i++) {\n    text += character(pool);\n  }\n\n  return text;\n}\nexport const str = string;\n\n/**\n * 返回一个整型数组\n *\n * @export\n * @param {number} start 开始\n * @param {number} stop  结束\n * @param {number} step  步长\n * @returns\n */\nexport function range(start, stop, step) {\n  if (!step) {\n    step = 1;\n  }\n\n  if (!stop) {\n    stop = start || 0;\n    start = 0;\n  }\n\n  start = +start; // 开始\n  stop = +stop; // 结束\n  step = +step; // 步长\n\n  const arr = [];\n\n  for (let i = start; i < stop; i += step) {\n    arr.push(i);\n  }\n\n  return arr;\n}\n","/**\n * 格式日期，网上抄的，eslit fix 了下而已。\n *\n * @param {string} fmt 格式化字符串\n * @param {Date} dt 日期对象\n * @returns\n */\nfunction dateFormat(fmt, dt) {\n  const o = {\n    'M+': dt.getMonth() + 1, // 月份\n    'd+': dt.getDate(), // 日\n    'h+': dt.getHours(), // 小时\n    'm+': dt.getMinutes(), // 分\n    's+': dt.getSeconds(), // 秒\n    'q+': Math.floor((dt.getMonth() + 3) / 3), // 季度\n    S: dt.getMilliseconds(), // 毫秒\n  };\n\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, `${dt.getFullYear()}`.substr(4 - RegExp.$1.length));\n  }\n\n  /* eslint no-restricted-syntax:0 */\n  for (const k in o) {\n    if (new RegExp(`(${k})`).test(fmt)) {\n      const rep = RegExp.$1.length === 1 ? o[k] : `00${o[k]}`.substr(`${o[k]}`.length);\n      fmt = fmt.replace(RegExp.$1, rep);\n    }\n  }\n\n  return fmt;\n}\n\n/**\n * 随机生成 [1970-01-01, 10年后] 区间的日期对象\n *\n * @returns\n */\nfunction randomDate() {\n  const min = new Date(0); // 1970-01-01\n  const max = new Date();\n  max.setFullYear(max.getFullYear() + 10); // 10年后\n  return new Date(Math.random() * (max.getTime() - min.getTime()));\n}\n\n/**\n * 日期部分格式化\n *\n * @export\n * @param {string} format\n * @returns\n */\nexport function date(format) {\n  return dateFormat(format || 'yyyy-MM-dd', randomDate());\n}\n\n/**\n * 时分秒部分格式化\n *\n * @export\n * @param {string} format\n * @returns\n */\nexport function time(format) {\n  return dateFormat(format || 'hh:mm:ss', randomDate());\n}\n\n/**\n * 完整时间部分格式化\n *\n * @export\n * @param {string} format\n * @returns\n */\nexport function datetime(format) {\n  return dateFormat(format || 'yyyy-MM-dd hh:mm:ss', randomDate());\n}\n\n/**\n * 当前时间格式化\n *\n * @export\n * @param {string} format\n * @returns\n */\nexport function now(format) {\n  return dateFormat(format || 'yyyy-MM-dd hh:mm:ss', new Date());\n}\n","import { integer } from './basic';\n\n/**\n * 把字符串的第一个字母转换为大写\n *\n * @export\n * @param {string} word\n * @returns\n */\nexport function capitalize(word) {\n  word = String(word);\n  return word.charAt(0).toUpperCase() + word.substr(1);\n}\n\n/**\n * 把字符串转换为大写\n *\n * @export\n * @param {string} str\n * @returns\n */\nexport function upper(str) {\n  return String(str).toUpperCase();\n}\n\n/**\n * 把字符串转换为小写\n *\n * @export\n * @param {string} str\n * @returns\n */\nexport function lower(str) {\n  return String(str).toLowerCase();\n}\n\n/**\n * 打乱数组中元素的顺序\n * @param {array} arr\n * @see https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n */\nexport function shuffle(arr, min, max) {\n  arr = arr.slice(0);\n  for (let i = arr.length; i; i--) {\n    const j = Math.floor(Math.random() * i);\n    [arr[i - 1], arr[j]] = [arr[j], arr[i - 1]];\n  }\n\n  switch (arguments.length) {\n    case 2:\n      max = min;\n    /* falls through */\n    case 3:\n      min = parseInt(min, 10);\n      max = parseInt(max, 10);\n      return arr.slice(0, integer(min, max));\n    default:\n      return arr;\n  }\n}\n\n/**\n * 从数组中随机选取一个元素，并返回\n *\n * @export\n * @param {array} arr\n * @param {number} min\n * @param {number} max\n */\nexport function pick(arr, min, max) {\n  if (!(arr instanceof Array)) {\n    /* eslint prefer-rest-params:0 */\n    arr = [].slice.call(arguments);\n    min = 1;\n    max = 1;\n  } else {\n    // pick( [ item1, item2 ... ] )\n    if (min === undefined) min = 1;\n    // pick( [ item1, item2 ... ], count )\n    if (max === undefined) max = min;\n  }\n\n  if (min === 1 && max === 1) {\n    return arr[integer(0, arr.length - 1)];\n  }\n\n  return shuffle(arr, min, max);\n}\n","import DICT from './color_dict';\n\nconst goldenRatio = 0.618033988749895;\nlet hue = Math.random();\n\n/**\n * 随机生成一个有吸引力的颜色\n *\n * @param {any} saturation\n * @param {any} value\n * @returns\n *\n * @see http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n * @see https://github.com/devongovett/color-generator/blob/master/index.js\n */\nfunction goldenRatioColor(saturation, value) {\n  hue += goldenRatio;\n  hue %= 1;\n\n  if (typeof saturation !== 'number') {\n    saturation = 0.5;\n  }\n\n  if (typeof value !== 'number') {\n    value = 0.95;\n  }\n\n  return [hue * 360, saturation * 100, value * 100];\n}\n\n\n/* eslint-disable */\nfunction hsv2hsl(hsv) {\n  var h = hsv[0],\n    s = hsv[1] / 100,\n    v = hsv[2] / 100,\n    sl, l;\n\n  l = (2 - s) * v;\n  sl = s * v;\n  sl /= (l <= 1) ? l : 2 - l;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n}\n\nfunction hsv2rgb(hsv) {\n  var h = hsv[0] / 60\n  var s = hsv[1] / 100\n  var v = hsv[2] / 100\n  var hi = Math.floor(h) % 6\n\n  var f = h - Math.floor(h)\n  var p = 255 * v * (1 - s)\n  var q = 255 * v * (1 - (s * f))\n  var t = 255 * v * (1 - (s * (1 - f)))\n\n  v = 255 * v\n\n  switch (hi) {\n    case 0:\n      return [v, t, p]\n    case 1:\n      return [q, v, p]\n    case 2:\n      return [p, v, t]\n    case 3:\n      return [p, q, v]\n    case 4:\n      return [t, p, v]\n    case 5:\n      return [v, p, q]\n  }\n}\n\n/**\n * rgb 转 hex\n *\n * @param {any} r\n * @param {any} g\n * @param {any} b\n * @returns\n *\n */\nfunction rgb2hex(r, g, b) {\n  return ((256 + r << 8 | g) << 8 | b).toString(16).slice(1);\n}\n/* eslint-enable */\n\n/**\n * 随机生成一个颜色，格式为 '#RRGGBB' 或 'RRGGBB'\n *\n * @export\n * @param {bool} symbol\n * @returns\n */\nexport function hex(symbol) {\n  const hsv = goldenRatioColor();\n  const rgbVal = hsv2rgb(hsv);\n  const ret = rgb2hex(rgbVal[0], rgbVal[1], rgbVal[2]);\n  return symbol ? `#${ret}` : ret;\n}\n\n/**\n * rgb颜色 rgb(128,255,255)\n *\n * @export\n * @returns\n */\nexport function rgb() {\n  const hsv = goldenRatioColor();\n  const ret = hsv2rgb(hsv);\n  return `rgb(${parseInt(ret[0], 10)}, ${parseInt(ret[1], 10)}, ${parseInt(ret[2], 10)})`;\n}\n\n/**\n * rgba颜色 rgba(128,255,255,0.3)\n *\n * @export\n * @returns\n */\nexport function rgba() {\n  const hsv = goldenRatioColor();\n  const ret = hsv2rgb(hsv);\n  return `rgba(${parseInt(ret[0], 10)}, ${parseInt(ret[1], 10)}, ${parseInt(ret[2], 10)}, ${Math.random().toFixed(2)})`;\n}\n\n/**\n * hsl颜色 hsl(300,80%,90%)\n *\n * @export\n * @returns\n */\nexport function hsl() {\n  const hsv = goldenRatioColor();\n  const ret = hsv2hsl(hsv);\n  return `hsl(${parseInt(ret[0], 10)}, ${parseInt(ret[1], 10)}, ${parseInt(ret[2], 10)})`;\n}\n\n/**\n * 随机生成一个有吸引力的颜色，格式为 '#RRGGBB'\n *\n * @export\n * @param {any} name\n * @returns\n */\nexport function color(name) {\n  if (name || DICT[name]) {\n    return DICT[name].nicer;\n  }\n  return hex(true);\n}\n","import Random from './random/index';\n\n/* eslint no-confusing-arrow:0 */\n/* eslint no-underscore-dangle:0 */\n\n/**\n * Object#toString\n *\n * @function toString\n */\nconst toString = Object.prototype.toString;\n\n/**\n * 获取数据类型\n *\n * @param {any} any\n * @returns {string}\n */\nfunction type(any) {\n  return toString.call(any).slice(8, -1).toLowerCase();\n}\n\n/**\n * 匹配键名处理\n *\n * @param {any} key\n * @param {any} re\n * @returns\n */\nfunction match(key, re) {\n  if (type(key) !== 'string') {\n    return null;\n  }\n  return key.match(re);\n}\n\n// 处理根据\nconst processors = {\n  // 对象处理\n  object(tpl, key, opts) {\n    // 'name|count': object\n    // 'name|min-max': object\n    const ret = {};\n    const keys = Object.keys(tpl);\n    const length = keys.length;\n    let count = length;\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/);\n\n    if (m) {\n      if (m[2]) {\n        count = Random.int(m[1], m[2]);\n      } else {\n        count = +m[1];\n      }\n    }\n\n    opts.parentTpl = tpl; // 带上当前对象\n    opts.parent = ret; // 当前解析后的对象\n\n    if (count >= length) {\n      // 函数放末尾处理 'name': function\n      keys.sort(k => type(k) === 'function' ? 1 : 0);\n      // 处理全部\n      keys.forEach((it) => {\n        ret[it.replace(/\\|.+/, '')] = generator(tpl[it], it, opts);\n      });\n    } else {\n      // 随机抽取 (简单洗牌)\n      keys.sort(() => (Math.random() < 0.5 ? -1 : 1)).slice(0, count).forEach((it) => {\n        ret[it.replace(/\\|.+/, '')] = generator(tpl[it], it, opts);\n      });\n    }\n\n    return ret;\n  },\n\n  // 数组处理\n  array(tpl, key, opts) {\n    // 'name|1': array\n    // 'name|+1': array\n    // 'name|min-max': array\n    // 'name|count': array\n    let result = [];\n    const length = tpl.length;\n\n    // 处理空数组\n    if (length === 0) {\n      return result;\n    }\n\n    let count = 0;\n    const m = match(key, /\\|(\\+)?(\\d+)(?:-(\\d+))?/);\n\n    if (m) {\n      if (m[2] === '1' && m[3] === undefined) {\n        if (m[1] === '+') {\n          // 'name|+1': array\n          let idx = tpl._idx || 0;\n          if (idx >= length) {\n            idx = 0;\n          }\n          result = generator(tpl[idx], idx, opts);\n          tpl._idx = idx + 1;\n        } else {\n          // 'name|1': array\n          const idx = Random.int(0, length - 1);\n          result = generator(tpl[idx], idx, opts);\n        }\n        return result;\n      } else if (m[3]) {\n        count = Random.int(m[2], m[3]);\n      } else {\n        count = +m[2];\n      }\n    }\n\n    // 重复 count 次\n    for (let i = 0; i < count; i += 1) {\n      tpl.forEach(it => result.push(generator(it, i, opts)));\n    }\n\n    return result;\n  },\n\n  // 数字处理\n  number(tpl, key, opts) {\n    // 'name|+number': number\n    // 'name|min-max': number\n    // 'name|min-max.dmin-dmax': number\n    // 'name|number.dmin-dmax': number\n    const m = match(key, /\\|([+-]?\\d+)(?:-([-]?\\d+))?(?:\\.(\\d+)(?:-(\\d+))?)?/);\n\n    if (!m) {\n      return tpl; // 没有匹配到\n    }\n\n    // 'name|+number': number\n    if (m[1][0] === '+') {\n      opts.parentTpl[key] += parseInt(m[1], 10); // 父节点数据累加\n      return tpl;\n    }\n\n    // 'name|min-max.dmin-dmax': number\n    if (m[3] || m[4]) {\n      return Random.float(m[1], m[2], m[3], m[4]);\n    }\n\n    // 'name|min-max': number\n    if (m[2]) {\n      return Random.int(m[1], m[2]);\n    }\n\n    return tpl;\n  },\n\n  // 字符串处理\n  string(tpl, key) {\n    // 'name|min-max': string  重复 string 字符串 min-max 次\n    // 'name|count': string  重复 string 字符串 count次\n    let count = 0; // 重复次数\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/); // 匹配key\n\n    if (m) {\n      if (m[2]) {\n        // 'name|min-max': string\n        count = Random.int(m[1], m[2]);\n      } else {\n        // 'name|count': string\n        count = +m[1];\n      }\n    }\n\n    let str = tpl;\n\n    // 'name|min-max': '' or 'name|count': ''\n    if (tpl === '') {\n      return Random.string('alpha', count || undefined);\n    }\n\n    if (count) {\n      str = Array(count + 1).join(tpl); // 重复N次\n    }\n\n    // TODO: 占位符处理\n\n    return str;\n  },\n\n  // 布尔值处理\n  boolean(tpl, key) {\n    // 'name|min-max': boolean  1/min-max 的概率返回 boolean 的值\n    // 'name|count': boolean  1/count 概率返回 boolean 的值\n    const m = match(key, /\\|(\\d+)(?:-(\\d+))?/); // 匹配key\n    return m ? Random.bool(m[1], m[2], tpl) : tpl;\n  },\n\n  // 函数处理 (异步处理，为了获取完整 root 对象)\n  function: (fn, key, opts) => {\n    // 'name': function\n    opts.callbacks.push({ fn, key, parent: opts.parent });\n    return '[Waiting for callback processing...]';\n  },\n};\n\nexport { Random };\n\n/**\n * 数据生成器入口\n *\n * @export\n * @param {any} data mock 模板数据\n * @param {string} key 当前数据的 key\n * @param {object} opts 公用数据\n * @returns {any}\n */\nexport default function generator(data, key, opts) {\n  const processor = processors[type(data)];\n  return processor ? processor(data, key, opts) : data;\n}\n","import { pick } from './helper';\n\n// 七牛占位图 host，支持 https\nlet host = 'dn-placeholder.qbox.me';\n\n// 常见的广告宽高\nconst adSize = [\n  '300x250',\n  '250x250',\n  '240x400',\n  '336x280',\n  '180x150',\n  '720x300',\n  '468x60',\n  '234x60',\n  '88x31',\n  '120x90',\n  '120x60',\n  '120x240',\n  '125x125',\n  '728x90',\n  '160x600',\n  '120x600',\n  '300x600',\n];\n\n// 常见的屏幕宽高 (暂时没用)\n// const screenSize = [\n//   '320x200',\n//   '320x240',\n//   '640x480',\n//   '800x480',\n//   '800x480',\n//   '1024x600',\n//   '1024x768',\n//   '1280x800',\n//   '1440x900',\n//   '1920x1200',\n//   '2560x1600',\n// ];\n\n// 常见的视频宽高 (暂时没用)\n// const videoSize = ['720x480', '768x576', '1280x720', '1920x1080'];\n\n/**\n * 设置 host 用于自定义占位图\n *\n * @export\n * @param {any} newHost\n */\nexport function setImageHost(newHost) {\n  host = newHost;\n}\n\n/**\n * 生成一个随机的占位图\n *\n * @export\n * @param {string} size\n * @param {string} background\n * @param {string} foreground\n * @param {string} format\n * @param {string} text\n * @returns\n */\nexport function image(size, background, foreground, format, text) {\n  // Random.image( size, background, foreground, text )\n  if (arguments.length === 4) {\n    text = format;\n    format = undefined;\n  }\n  // Random.image( size, background, text )\n  if (arguments.length === 3) {\n    text = foreground;\n    foreground = undefined;\n  }\n  // Random.image()\n  if (!size) {\n    size = pick(adSize);\n  }\n\n  return `http://${host}/${size}${background ? `/${background}` : ''}${foreground\n    ? `/${foreground}`\n    : ''}${format ? `.${format}` : ''}${text ? `&text=${text}` : ''}`;\n}\n","/**\n * Color 字典数据\n *\n * 字典数据来源 [A nicer color palette for the web](http://clrs.cc/)\n */\nexport default {\n  // name value nicer\n  navy: {\n    value: '#000080',\n    nicer: '#001F3F',\n  },\n  blue: {\n    value: '#0000ff',\n    nicer: '#0074D9',\n  },\n  aqua: {\n    value: '#00ffff',\n    nicer: '#7FDBFF',\n  },\n  teal: {\n    value: '#008080',\n    nicer: '#39CCCC',\n  },\n  olive: {\n    value: '#008000',\n    nicer: '#3D9970',\n  },\n  green: {\n    value: '#008000',\n    nicer: '#2ECC40',\n  },\n  lime: {\n    value: '#00ff00',\n    nicer: '#01FF70',\n  },\n  yellow: {\n    value: '#ffff00',\n    nicer: '#FFDC00',\n  },\n  orange: {\n    value: '#ffa500',\n    nicer: '#FF851B',\n  },\n  red: {\n    value: '#ff0000',\n    nicer: '#FF4136',\n  },\n  maroon: {\n    value: '#800000',\n    nicer: '#85144B',\n  },\n  fuchsia: {\n    value: '#ff00ff',\n    nicer: '#F012BE',\n  },\n  purple: {\n    value: '#800080',\n    nicer: '#B10DC9',\n  },\n  silver: {\n    value: '#c0c0c0',\n    nicer: '#DDDDDD',\n  },\n  gray: {\n    value: '#808080',\n    nicer: '#AAAAAA',\n  },\n  black: {\n    value: '#000000',\n    nicer: '#111111',\n  },\n  white: {\n    value: '#FFFFFF',\n    nicer: '#FFFFFF',\n  },\n};\n","import * as basic from './basic';\nimport * as date from './date';\nimport * as image from './image';\nimport * as color from './color';\n\nimport * as helper from './helper';\n\nexport default {\n  ...basic,\n  ...date,\n  ...image,\n  ...color,\n\n  ...helper,\n};\n","import generator, { Random } from './generator';\n\n// 导出工具对象\nexport { Random };\n\n// 生成器包装\nexport const Mock = {\n  mock(any) {\n    const opts = { rootTpl: any, callbacks: [] };\n    const root = generator(any, '', opts);\n\n    // 处理函数回调\n    opts.callbacks.forEach((opt) => {\n      // this 是当前父节点对象，root 是跟对象\n      opt.parent[opt.key] = opt.fn.call(opt.parent, root);\n    });\n\n    return root;\n  },\n};\n\nexport default Mock;\n"],"names":["integer","min","max","undefined","parseInt","Math","round","random","boolean","cur","denom","Boolean","character","pool","String","poolsChar","toLowerCase","charAt","length","string","count","text","i","dateFormat","fmt","dt","o","getMonth","getDate","getHours","getMinutes","getSeconds","floor","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","k","rep","randomDate","Date","setFullYear","getTime","shuffle","arr","slice","j","arguments","pick","Array","call","goldenRatioColor","saturation","value","goldenRatio","hue","hsv2hsl","hsv","sl","l","h","s","v","hsv2rgb","hi","f","p","q","t","rgb2hex","r","g","b","toString","hex","symbol","rgbVal","ret","type","any","match","key","re","generator","data","opts","processor","processors","alpha","lower","upper","number","int","bool","char","str","dmin","dmax","dcount","parseFloat","start","stop","step","push","format","word","toUpperCase","host","adSize","newHost","size","background","foreground","toFixed","name","DICT","nicer","basic","date","image","color","helper","Object","prototype","tpl","keys","m","Random","parentTpl","parent","sort","forEach","it","result","idx","_idx","float","join","fn","callbacks","Mock","rootTpl","root","opt"],"mappings":"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"}